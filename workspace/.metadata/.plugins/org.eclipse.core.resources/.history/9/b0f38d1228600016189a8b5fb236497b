package org.qiang.devappbundle;

import java.util.Arrays;

import org.qiang.ipcmsgprotolibbundle.service.user.IpcMsgProtoLib;

class StSoftwareVersion {
	private byte[] soft_ver_byte;
	
	public StSoftwareVersion( String str_ver ) {
		byte[] tmp_ver;
		
		soft_ver_byte = new byte[32];
		Arrays.fill( soft_ver_byte, (byte)0 );
		
		if ( null != str_ver ) {
			tmp_ver = str_ver.getBytes();
			CommonSystem.arraycopy( tmp_ver, soft_ver_byte, str_ver.length() );
		}
	}
	
	public String getSoftVersion() {
		return new String( soft_ver_byte );
	}
	
	public byte[] toSendByteData() {
		return soft_ver_byte;
	}
	
	public int getSendLen() {
		int len = 0;
		
		len = soft_ver_byte.length;
		
		return len;
	}
	
	public boolean dataPaser( byte[] data_byte ) {
		CommonSystem.arraycopy( data_byte, soft_ver_byte, 32 );
		
		return true;
	}
}

public class CommonSystem {
	public static final int GET_SOFTWARE_VER_HOST_CMD = 20;
	
	public static String commandToString( int cmd ) {
		byte[] cmd_byte = new byte[2];
		cmd_byte[0] = (byte)( ( cmd >> 8 ) & 0xff );
		cmd_byte[1] = (byte)( cmd & 0xff );
		
		return new String( cmd_byte );
	}
	
	public static boolean arraycopy( byte[] src, byte[] dest, int len ) {
		int i = 0;
		
		for ( i = 0; i < len; i++ ) {
			dest[i] = src[i];
		}
		
		return true;
	}
	
	public static StSoftwareVersion get_software_ver_ipc_lib( StSoftwareVersion stSoftVer ) {
		Login login = Activator.getLogin();
		IpcMsgProtoLib ipc_lib = login.getIpcMsgProtoLib();
		byte[] receiv_data_byte;
		
		try {
			receiv_data = ipc_lib.cmd_ipc_lib( 
							commandToString( GET_SOFTWARE_VER_HOST_CMD ), 
							stSoftVer.toSendByteData(), 
							stSoftVer.getSendLen() 
							);
		} catch ( Exception err ) {
			err.printStackTrace();
		}
		stSoftVer.dataPaser( receiv_data.getBytes() );
		
		return stSoftVer;
	}
}